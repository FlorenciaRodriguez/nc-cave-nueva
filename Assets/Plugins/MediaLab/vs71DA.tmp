<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MediaLab.Common</name>
    </assembly>
    <members>
        <member name="P:MediaLab.Common.BezierCurve.BezierCurve.StartPosition">
            <summary>
            The point at the beginning of the curve (P0).
            </summary>
        </member>
        <member name="P:MediaLab.Common.BezierCurve.BezierCurve.StartControlPoint">
            <summary>
            The second point along the curve (P1).
            </summary>
        </member>
        <member name="P:MediaLab.Common.BezierCurve.BezierCurve.EndControlPoint">
            <summary>
            The third point along the curve (P2).
            </summary>
        </member>
        <member name="P:MediaLab.Common.BezierCurve.BezierCurve.EndPosition">
            <summary>
            The point at the end of the curve (P3).
            </summary>
        </member>
        <member name="P:MediaLab.Common.BezierCurve.BezierCurve.Resolution">
            <summary>
            The number of points along the curve used to create measurable segments.
            </summary>
        </member>
        <member name="M:MediaLab.Common.BezierCurve.BezierCurve.CalculateApproximateLength">
            <summary>
            Calculate approximate length of the curve, using resolution specified.
            </summary>
            <returns>
            Length of the curve calculated.
            </returns>
        </member>
        <member name="M:MediaLab.Common.BezierCurve.BezierCurve.GetPositionAt(System.Single)">
            <summary>
            Gets the position of bezier point at percentage along the curve.
            </summary>
            <param name="percentage">
            Value between 0 and 1 representing the percentage along the curve.
            </param>
            <returns>
            Returns the position of bezier point at percentage specified.
            </returns>
        </member>
        <member name="M:MediaLab.Common.BezierCurve.BezierCurve.GetDirectionAt(System.Single)">
            <summary>
            Gets the direction vector at percentage of the curve.
            </summary>
            <param name="percentage">
            Value between 0 and 1 representing the percentage along the curve.
            </param>
            <returns>
            Returns the direction of bezier point at percentage specified.
            </returns>
        </member>
        <member name="M:MediaLab.Common.BezierCurve.BezierCurve.GetRotationAt(System.Single)">
            <summary>
            Gets the rotation of point at percentage along the curve.
            </summary>
            <param name="percentage">
            Value between 0 and 1 representing the percentage along the curve.
            </param>
            <returns>
            Returns the rotation of point at percentage specified.
            </returns>
        </member>
        <member name="M:MediaLab.Common.BezierCurve.BezierCurve.GetTransformAt(System.Single,UnityEngine.Vector3@,UnityEngine.Quaternion@)">
            <summary>
            Gets the transform at percentage along the curve
            </summary>
            <param name="percentage">Value between 0 and 1 representing the percentage along the road</param>
            <param name="position">Position at percentage specified</param>
            <param name="rotation">Rotation at percentage specified</param>
        </member>
        <member name="M:MediaLab.Common.BezierCurve.BezierCurve.ProjectPointOnCurve(UnityEngine.Vector3,System.Single@)">
            <summary>
            Gets projected point on bezier curve.
            </summary>
            <param name="point">
            Point to project.
            </param>
            <param name="percentage">
            Percentage along curve of projected point on bezier curve.
            </param>
            <returns>
            Returns point projected on bezier curve.
            </returns>
        </member>
        <member name="M:MediaLab.Common.BezierCurve.BezierCurve.ProjectPointOnCurve(UnityEngine.Vector3)">
            <summary>
            Gets projected point on curve.
            </summary>
            <param name="point">
            Point to project.
            </param>
            <returns>
            Returns point projected on curve.
            </returns>
        </member>
        <member name="M:MediaLab.Common.BezierCurve.BezierCurve.GetPercentageOnCurve(UnityEngine.Vector3)">
            <summary>
            Gets percentage along curve of projected point on curve.
            </summary>
            <param name="point">
            Point to project.
            </param>
            <returns>
            Returns percentage along curve of projected point on curve.
            </returns>
        </member>
        <member name="M:MediaLab.Common.BezierCurve.BezierCurve.CalculateDistanceFromPointToCurve(UnityEngine.Vector3)">
            <summary>
            Gets distance from point to curve.
            </summary>
            <param name="point">
            Point position.
            </param>
            <returns>
            Returns the distance from point to curve.
            </returns>
        </member>
        <member name="F:MediaLab.Common.Constants.MessageMvvm.ShowLoadingReportsSectionOverlay">
            <summary>
            Muestra el Overlay/ProgressRing para los tabs de Reports
            </summary>
        </member>
        <member name="F:MediaLab.Common.Constants.MessageMvvm.HideLoadingReportsSectionOverlay">
            <summary>
            Oculta el Overlay/ProgressRing para los tabs de Reports
            </summary>
        </member>
        <member name="F:MediaLab.Common.Constants.MessageMvvm.ShowLoadingUsersSectionOverlay">
            <summary>
            Muestra el Overlay/ProgressRing para los tabs de Users
            </summary>
        </member>
        <member name="F:MediaLab.Common.Constants.MessageMvvm.HideLoadingUsersSectionOverlay">
            <summary>
            Oculta el Overlay/ProgressRing para los tabs de Users
            </summary>
        </member>
        <member name="F:MediaLab.Common.Constants.MessageMvvm.ShowLoadingGeneralSettingsSectionOverlay">
            <summary>
            Muestra el Overlay/ProgressRing para los tabs de Users
            </summary>
        </member>
        <member name="F:MediaLab.Common.Constants.MessageMvvm.HideLoadingGeneralSettingsSectionOverlay">
            <summary>
            Oculta el Overlay/ProgressRing para los tabs de Users
            </summary>
        </member>
        <member name="F:MediaLab.Common.Constants.MessageMvvm.ResetFilter">
            <summary>
            Resetea el filtro de busqueda del Log
            </summary>
        </member>
        <member name="T:MediaLab.Common.Helpers.ApplicationRunningHelper">
            -------------------------------------------------------------------------------------------------
            <summary> Application Running Helper. </summary>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:MediaLab.Common.Helpers.ApplicationRunningHelper.AlreadyRunning">
            -------------------------------------------------------------------------------------------------
            <summary> check if current process already running. if running, set focus to existing process and 
                      returns <see langword="true"/> otherwise returns <see langword="false"/>. </summary>
            <returns> <see langword="true"/> if it succeeds, <see langword="false"/> if it fails. </returns>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:MediaLab.Common.Helpers.CollectionHelper.AddItemToLimitedCollection``1(System.Collections.Generic.IList{``0},``0,System.Int32)">
            <summary>
            Agrega el elemento al final de la lista. Si tiene mas de countElement elimina el primero.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="listToClone"></param>
            <param name="item">Item a agregar</param>
            <param name="countItem">Cantidad limite de items que puede tener la colecci√≥n</param>
        </member>
        <member name="M:MediaLab.Common.Helpers.EncryptHelper.Encrypt(System.String,System.Boolean,System.String)">
            <summary>
            Encrypt a string using dual encryption method. Return a encrypted cipher Text
            </summary>
            <param name="toEncrypt">string to be encrypted</param>
            <param name="useHashing">use hashing? send to for extra secirity</param>
            <param name="securityKey">string securityKey</param>
            <returns></returns>
        </member>
        <member name="M:MediaLab.Common.Helpers.EncryptHelper.Decrypt(System.String,System.Boolean,System.String)">
            <summary>
            DeCrypt a string using dual encryption method. Return a DeCrypted clear string
            </summary>
            <param name="cipherString">encrypted string</param>
            <param name="useHashing">Did you use hashing to encrypt this data? pass true is yes</param>
            <param name="securityKey">string securityKey</param>
            <returns></returns>
        </member>
        <member name="M:MediaLab.Common.Helpers.EnumHelper.ConvertStringToEnum``1(System.String)">
            <summary>
            Convierte string a Enum E
            </summary>
            <typeparam name="E"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MediaLab.Common.Helpers.FileHelper.DeleteFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Elimina todos los archivos de un path segun searchPattern
            </summary>
            <param name="path"></param>
            <param name="searchPattern"></param>
            <param name="searchOption"></param>
        </member>
        <member name="M:MediaLab.Common.Helpers.StringHelper.SearchText(System.String,System.String,System.String)">
            <summary>
            Busca el texto entre dos string
            </summary>
            <param name="text"></param>
            <param name="textToFind1"></param>
            <param name="textToFind2"></param>
            <returns></returns>
        </member>
        <member name="M:MediaLab.Common.Helpers.StringHelper.SearchText(System.String,System.String,System.Int32)">
            <summary>
            Busca texto a partir de un string y un determinado largo
            </summary>
            <param name="text"></param>
            <param name="textToFind1"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:MediaLab.Common.Helpers.StringHelper.VerifyStringVersion(System.String,System.String)">
            <summary>
            Return 0 if equal
            Return 1 if greater
            Return 2 if less
            </summary>
            <param name="version1"></param>
            <param name="version2"></param>
            <returns></returns>
        </member>
        <member name="M:MediaLab.Common.Helpers.StringHelper.GetKey(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Single}},System.String)">
            <summary>
            Separo las claves con un separador pasado como par√°metro
            </summary>
            <param name="values"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:MediaLab.Common.Helpers.StringHelper.GetListKey(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Single}})">
            <summary>
            Separo las claves en una lista
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MediaLab.Common.Helpers.StringHelper.Permute``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Obtiene todas las combinaciones de una lista
            </summary>
            <returns></returns>
        </member>
        <member name="M:MediaLab.Common.Helpers.MathHelper.CalculateAngleBetweenVectors(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Returns angle between two vectors
            </summary>
            <param name="v1">Vector3</param>
            <param name="v2">Vector3</param>
            <returns>Angle in degrees</returns>
        </member>
        <member name="M:MediaLab.Common.Helpers.MathHelper.CalculateSignedAngleBetweenVectors(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Returns signed angle between two vectors. 
            </summary>
            <param name="v1">Vector3</param>
            <param name="v2">Vector3</param>
            <returns>Signed angle in degrees. Negative value if v1->v2 is clockwise, positive value otherwise</returns>
        </member>
        <member name="M:MediaLab.Common.Helpers.MathHelper.CalculateAngleBetweenVectors(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns angle between two vectors
            </summary>
            <param name="v1">Vector2</param>
            <param name="v2">Vector2</param>
            <returns>Angle in degrees</returns>
        </member>
        <member name="M:MediaLab.Common.Helpers.MathHelper.CalculateSignedAngleBetweenVectors(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns signed angle between two vectors. 
            </summary>
            <param name="v1">Vector2</param>
            <param name="v2">Vector2</param>
            <returns>Signed angle in degrees. Negative value if v1->v2 is clockwise, positive value otherwise</returns>
        </member>
        <member name="M:MediaLab.Common.Helpers.MathHelper.VerifyPointInsideCircle(UnityEngine.Vector3,UnityEngine.Vector3,System.Double)">
            <summary>
            Si la distancia del punto actual es mayor que la distancia al centro entonces esta fuera del circulo
            </summary>
            <param name="positionTest"></param>
            <param name="centroid"></param>
            <param name="radiusCurrentWaypoint"></param>
            <returns></returns>
        </member>
        <member name="M:MediaLab.Common.Helpers.MathHelper.CalculateDistanceToPlane(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)">
            <summary>
            Returns distance between an element and plane
            </summary>
            <param name="normal">Vector3</param>
            <param name="point">Vector3</param>
            <param name="elementPosition">Vector3</param>
            <param name="width"></param>
            <param name="depth"></param>
            <returns>Angle in degrees</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MediaLab.Common.Helpers.MathHelper.IsVectorLessThan(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)" -->
        <member name="M:MediaLab.Common.Helpers.MathHelper.GetQuadraticBezierPoint(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Gets the point percentage along a second-order curve.
            A quadratic Bezier curve is the path traced by the function B(t), given points P0, P1, and P2.
            Can be interpreted as the linear interpolation of corresponding points on the linear Bezier curves from P0 to P1 and from P1 to P2 respectively.
            </summary>
            <param name="startPoint">
            The point at the beginning of the curve (PO).
            </param>
            <param name="controlPoint">
            The second point along the curve (P1).
            </param>
            <param name="endPoint">
            The point at the end of the curve (P2).
            </param>
            <param name="percentage">
            Value between 0 and 1 representing the percentage along the curve.
            </param>
            <returns>
            Returns the point percentage along a second-order curve.
            </returns>
        </member>
        <member name="M:MediaLab.Common.Helpers.MathHelper.GetCubicBezierPoint(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Gets the point percentage along a third-order curve.
            Four points P0, P1, P2 and P3 in the plane or in higher-dimensional space define a cubic Bezier curve. 
            The curve starts at P0 going toward P1 and arrives at P3 coming from the direction of P2. 
            Usually, it will not pass through P1 or P2; these points are only there to provide directional information. 
            The distance between P1 and P2 determines "how far" and "how fast" the curve moves towards P1 before turning towards P2.
            </summary>
            <param name="startPoint">
            The point at the beginning of the curve (P0).
            </param>
            <param name="startControlPoint">
            The second point along the curve (P1).
            </param>
            <param name="endControlPoint">
            The third point along the curve (P2).
            </param>
            <param name="endPoint">
            The point at the end of the curve (P3).
            </param>
            <param name="percentage">
            Value between 0 and 1 representing the percentage along the curve.
            </param>
            <returns>
            Returns the point percentage along a third-order curve.
            </returns>
        </member>
        <member name="M:MediaLab.Common.Helpers.MathHelper.GetQuadraticBezierFirstDerivative(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Gets the first derivative percentage along a second-order curve.
            A quadratic Bezier curve is the path traced by the function B(t), given points P0, P1, and P2.
            Can be interpreted as the linear interpolation of corresponding points on the linear Bezier curves from P0 to P1 and from P1 to P2 respectively.
            </summary>
            <param name="startPoint">
            The point at the beginning of the curve (P0).
            </param>
            <param name="controlPoint">
            The second point along the curve (P1).
            </param>
            <param name="endPoint">
            The point at the end of the curve (P2).
            </param>
            <param name="percentage">
            Value between 0 and 1 representing the percentage along the curve.
            </param>
            <returns>
            Returns the first derivative percentage along a second-order curve.
            </returns>
        </member>
        <member name="M:MediaLab.Common.Helpers.MathHelper.GetCubicBezierFirstDerivative(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Gets the first derivative percentage along a third-order curve.
            Four points P0, P1, P2 and P3 in the plane or in higher-dimensional space define a cubic Bezier curve. 
            The curve starts at P0 going toward P1 and arrives at P3 coming from the direction of P2. 
            Usually, it will not pass through P1 or P2; these points are only there to provide directional information. 
            The distance between P1 and P2 determines "how far" and "how fast" the curve moves towards P1 before turning towards P2.
            </summary>
            <param name="startPoint">
            The point at the beginning of the curve (P0).
            </param>
            <param name="startControlPoint">
            The second point along the curve (P1).
            </param>
            <param name="endControlPoint">
            The third point along the curve (P2).
            </param>
            <param name="endPoint">
            The point at the end of the curve (P3).
            </param>
            <param name="percentage">
            Value between 0 and 1 representing the percentage along the curve.
            </param>
            <returns>
            Returns the first derivative percentage along a third-order curve.
            </returns>
        </member>
        <member name="M:MediaLab.Common.Helpers.MathHelper.CalculateBezierApproximateLength(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Int32)">
            <summary>
            Calculate approximate length between two bezier points, using resolution specified.
            </summary>
            <param name="startPoint">
            The point at the beginning of the curve (P0).
            </param>
            <param name="startControlPoint">
            The second point along the curve (P1).
            </param>
            <param name="endControlPoint">
            The third point along the curve (P2).
            </param>
            <param name="endPoint">
            The point at the end of the curve (P3).
            </param>
            <param name="resolution">
            The number of points along the curve used to create measurable segments.
            </param>
            <returns>
            Length between bezier points.
            </returns>
        </member>
        <member name="M:MediaLab.Common.Helpers.MathHelper.CalculateBezierApproximateLength(MediaLab.Common.BezierCurve.BezierCurve)">
            <summary>
            Calculate approximate length between two bezier points, using resolution specified.
            </summary>
            <param name="bezierCurve">
            The bezier curve
            </param>
            <returns>
            Length between bezier points.
            </returns>
        </member>
        <member name="M:MediaLab.Common.Helpers.MathHelper.GetBezierPoint(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Gets the point percentage along a curve
            Automatically calculates for the number of relevant points.
            </summary>
            <param name="startPoint">
            The point at the beginning of the curve (P0).
            </param>
            <param name="startControlPoint">
            The second point along the curve (P1).
            </param>
            <param name="endControlPoint">
            The third point along the curve (P2).
            </param>
            <param name="endPoint">
            The point at the end of the curve (P3).
            </param>
            <param name="percentage">
            Value between 0 and 1 representing the percentage along the curve.
            </param>
            <returns>
            The point percentage along the curve.
            </returns>
        </member>
        <member name="M:MediaLab.Common.Helpers.MathHelper.GetBezierPoint(MediaLab.Common.BezierCurve.BezierCurve,System.Single)">
            <summary>
            Gets the point percentage along a curve
            Automatically calculates for the number of relevant points.
            </summary>
            <param name="bezierCurve">
            The bezier curve
            </param>
            <param name="percentage">
            Value between 0 and 1 representing the percentage along the curve.
            </param>
            <returns>
            The point percentage along the curve.
            </returns>
        </member>
        <member name="M:MediaLab.Common.Helpers.MathHelper.GetBezierFirstDerivative(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Gets the first derivative percentage along a curve.
            </summary>
            <param name="startPoint">
            The point at the beginning of the curve (P0).
            </param>
            <param name="startControlPoint">
            The second point along the curve (P1).
            </param>
            <param name="endControlPoint">
            The third point along the curve (P2).
            </param>
            <param name="endPoint">
            The point at the end of the curve (P3).
            </param>
            <param name="percentage">
            Value between 0 and 1 representing the percentage along the curve.
            </param>
            <returns>
            The first derivative percentage along the curve.
            </returns>
        </member>
        <member name="M:MediaLab.Common.Helpers.MathHelper.GetBezierFirstDerivative(MediaLab.Common.BezierCurve.BezierCurve,System.Single)">
            <summary>
            Gets the first derivative percentage along a curve.
            </summary>
            <param name="bezierCurve">
            The bezier curve
            </param>
            <param name="percentage">
            Value between 0 and 1 representing the percentage along the curve.
            </param>
            <returns>
            The first derivative percentage along the curve.
            </returns>
        </member>
        <member name="M:MediaLab.Common.Helpers.MathHelper.ProjectPointOnBezierCurve(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Int32)">
            <summary>
            Gets projected point on bezier curve.
            </summary>
            <param name="point">
            Point to project.
            </param>
            <param name="startPoint">
            The point at the beginning of the curve (P0).
            </param>
            <param name="startControlPoint">
            The second point along the curve (P1).
            </param>
            <param name="endControlPoint">
            The third point along the curve (P2).
            </param>
            <param name="endPoint">
            The point at the end of the curve (P3).
            </param>
            <param name="resolution">
            The number of points along the curve used to create measurable segments.
            </param>
            <returns>
            Returns point projected on bezier curve.
            </returns>
        </member>
        <member name="M:MediaLab.Common.Helpers.MathHelper.ProjectPointOnBezierCurve(UnityEngine.Vector3,MediaLab.Common.BezierCurve.BezierCurve)">
            <summary>
            Gets projected point on bezier curve.
            </summary>
            <param name="point">
            Point to project.
            </param>
            <param name="bezierCurve">
            The bezier curve
            </param>
            <returns>
            Returns point projected on bezier curve.
            </returns>
        </member>
        <member name="M:MediaLab.Common.Helpers.MathHelper.GetPercentageOnBezierCurve(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Int32)">
            <summary>
            Gets percentage along curve of projected point on bezier curve.
            </summary>
            <param name="point">
            Point to project.
            </param>
            <param name="startPoint">
            The point at the beginning of the curve (P0).
            </param>
            <param name="startControlPoint">
            The second point along the curve (P1).
            </param>
            <param name="endControlPoint">
            The third point along the curve (P2).
            </param>
            <param name="endPoint">
            The point at the end of the curve (P3).
            </param>
            <param name="resolution">
            The number of points along the curve used to create measurable segments.
            </param>
            <returns>
            Returns percentage along curve of projected point on bezier curve.
            </returns>
        </member>
        <member name="M:MediaLab.Common.Helpers.MathHelper.GetPercentageOnBezierCurve(UnityEngine.Vector3,MediaLab.Common.BezierCurve.BezierCurve)">
            <summary>
            Gets percentage along curve of projected point on bezier curve.
            </summary>
            <param name="point">
            Point to project.
            </param>
            <param name="bezierCurve">
            The bezier curve
            </param>
            <returns>
            Returns percentage along curve of projected point on bezier curve.
            </returns>
        </member>
        <member name="M:MediaLab.Common.Helpers.MathHelper.ProjectPointOnBezierCurve(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Int32,System.Single@)">
            <summary>
            Gets projected point on bezier curve.
            </summary>
            <param name="point">
            Point to project.
            </param>
            <param name="startPoint">
            The point at the beginning of the curve (P0).
            </param>
            <param name="startControlPoint">
            The second point along the curve (P1).
            </param>
            <param name="endControlPoint">
            The third point along the curve (P2).
            </param>
            <param name="endPoint">
            The point at the end of the curve (P3).
            </param>
            <param name="resolution">
            The number of points along the curve used to create measurable segments.
            </param>
            <param name="percentage">
            Percentage along curve of projected point on bezier curve.
            </param>
            <returns>
            Returns point projected on bezier curve.
            </returns>
        </member>
        <member name="M:MediaLab.Common.Helpers.MathHelper.ProjectPointOnBezierCurve(UnityEngine.Vector3,MediaLab.Common.BezierCurve.BezierCurve,System.Single@)">
            <summary>
            Gets projected point on bezier curve.
            </summary>
            <param name="point">
            Point to project.
            </param>
            <param name="bezierCurve">
            The bezier curve
            </param>
            <param name="percentage">
            Percentage along curve of projected point on bezier curve.
            </param>
            <returns>
            Returns point projected on bezier curve.
            </returns>
        </member>
        <member name="M:MediaLab.Common.Helpers.MathHelper.CalculateDistanceFromPointToBezierCurve(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Int32)">
            <summary>
            Gets distance from point to bezier curve.
            </summary>
            <param name="point">
            Point position.
            </param>
            <param name="startPoint">
            The point at the beginning of the curve (P0).
            </param>
            <param name="startControlPoint">
            The second point along the curve (P1).
            </param>
            <param name="endControlPoint">
            The third point along the curve (P2).
            </param>
            <param name="endPoint">
            The point at the end of the curve (P3).
            </param>
            <param name="resolution">
            The number of points along the curve used to create measurable segments.
            </param>
            <returns>
            Returns the distance from point to bezier curve.
            </returns>
        </member>
        <member name="M:MediaLab.Common.Helpers.MathHelper.CalculateDistanceFromPointToBezierCurve(UnityEngine.Vector3,MediaLab.Common.BezierCurve.BezierCurve)">
            <summary>
            Gets distance from point to bezier curve.
            </summary>
            <param name="point">
            Point position.
            </param>
            <param name="bezierCurve">
            The bezier curve
            </param>
            <returns>
            Returns the distance from point to bezier curve.
            </returns>
        </member>
        <member name="M:MediaLab.Common.Helpers.MathHelper.GetPercentageOnSegment(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Gets percentage along segment of projected point on segment.
            </summary>
            <param name="point">
            Point to project.
            </param>
            <param name="startSegment">
            Start of segment.
            </param>
            <param name="endSegment">
            End of segment.
            </param>
            <returns>
            Returns percentage along segment of projected point on segment.
            </returns>
        </member>
        <member name="M:MediaLab.Common.Helpers.MathHelper.ProjectPointOnSegment(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Gets projected point on segment.
            </summary>
            <param name="point">
            Point to project.
            </param>
            <param name="startSegment">
            Start of segment.
            </param>
            <param name="endSegment">
            End of segment.
            </param>
            <returns>
            Returns point projected on segment.
            </returns>
        </member>
        <member name="M:MediaLab.Common.Helpers.MathHelper.ProjectPointOnSegment(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single@)">
            <summary>
            Gets projected point on segment.
            </summary>
            <param name="point">
            Point to project.
            </param>
            <param name="startSegment">
            Start of segment.
            </param>
            <param name="endSegment">
            End of segment.
            </param>
            <param name="percentage">
            Percentage along segment of projected point on segment.
            </param>
            <returns>
            Returns point projected on segment.
            </returns>
        </member>
        <member name="M:MediaLab.Common.Helpers.MathHelper.CalculateDistanceFromPointToSegment(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Gets distance from point to bezier curve.
            </summary>
            <param name="point">
            Point position.
            </param>
            <param name="startSegment">
            Start of segment.
            </param>
            <param name="endSegment">
            End of segment.
            </param>
            <returns>
            Returns distance from point to bezier curve.
            </returns>
        </member>
        <member name="M:MediaLab.Common.Helpers.UnitConversionHelper.TimeSpanToFormattedString(System.Nullable{System.TimeSpan})">
            <summary>
            Converts DateTime to formatted string at the form:
            mm/m:ss/s
            A valid result is "01m:43s"
            </summary>
            <param name="dateTime">The date to convert</param>
            <returns>A string in the mm/m:ss/s form</returns>
        </member>
        <member name="M:MediaLab.Common.Reflection.ReflectionHelper.InvokeMethodByName(System.Object,System.String,System.Object[])">
            <summary>
            Invoke method by name given a class Instance.
            </summary>
            <param name="classInstance">
            The class instance.
            </param>
            <param name="methodName">
            The method name to ve invoked.
            </param>
            <param name="methodParams">
            The method params with the correct format passed as an array.
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:MediaLab.Common.Reflection.ReflectionHelper.GetChangedProperties(System.Object,System.Object)">
            <summary>
            Compare two object of the same time and return a List of string with the name of the properties that changed
            </summary>
            <param name="original">
            The original object.
            </param>
            <param name="comparable">
            The object to comparable with.
            </param>
            <returns>
            List of string with the name of the properties that changed
            </returns>
            <exception cref="T:System.InvalidOperationException">
            </exception>
        </member>
        <member name="M:MediaLab.Common.Reflection.ReflectionHelper.ExecuteOnListChanged(System.Object,System.Collections.IList,System.Collections.IList)">
            <summary>
            Given two IList of the same type this method execute the Method On'PropertyName'Changed defined in the listener.
            This method is executed for each property changed in each element of the list.
            If the original IList does not contain the item from the other IList then it will execute the mothod OnListItemAdded(ItemType) defined in the listener.
            If the mehtod On'PropertyName'Changed doesn't exists nothing will be executed. 
            The method On'PropertyName'Changed must have the exactly the same signature as the object type. 
            i.e: 
             - original param is: int MyProperty
             - this Helper will try to execute first the method: OnMyPropertyChanged(int newValue, int originalValue) in the given listener.
             - this Helper will execute the method: OnMyPropertyChanged(int newValue) in the given listener.
            </summary>
            <param name="listener">Listener that contains the methods to be invoked</param>
            <param name="original">Original IList Object</param>
            <param name="other">New IList Object to compare to</param>
        </member>
        <member name="M:MediaLab.Common.Reflection.ReflectionHelper.ExecuteOnChangedProperties(System.Object,System.Object,System.Object)">
            <summary>
            Given two objects of the same type this method execute the Method On'PropertyName'Changed defined in the listener. 
            If the mehtod On'PropertyName'Changed doesn't exists nothing will be executed. 
            The method On'PropertyName'Changed must have the exactly the same signature as the object type. 
            i.e: 
             - original param is: int MyProperty
             - this Helper will try to execute first the method: OnMyPropertyChanged(int newValue, int originalValue) in the given listener.
             - this Helper will execute the method: OnMyPropertyChanged(int newValue) in the given listener.
            </summary>
            <param name="listener">Listener that contains the methods to be invoked</param>
            <param name="original">Original Object</param>
            <param name="other">New Object to compare to</param>
            <returns>True if all the properties of the object contains invokers methods</returns>
        </member>
        <member name="M:MediaLab.Common.Reflection.ReflectionHelper.GetItemFromGenericList(System.Collections.IEnumerable,System.Object)">
            <summary>
            Return the Item if exists in list searching by HashCode
            </summary>
            <param name="list">List to search</param>
            <param name="item">Item to search</param>
            <returns></returns>
        </member>
        <member name="M:MediaLab.Common.Reflection.ReflectionHelper.GetChangedPropertiesInfo(System.Object,System.Object)">
            <summary>
            Given a list of concatenated properties returns the value of the last property, starting from originalFather.
            </summary>
            <param name="original"></param>
            <param name="comparable"></param>
            <returns></returns>
        </member>
        <member name="T:MediaLab.Common.Resources.Common">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MediaLab.Common.Resources.Common.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MediaLab.Common.Resources.Common.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MediaLab.Common.Resources.Common.TimeFormat">
            <summary>
              Looks up a localized string similar to {0:mm}m:{0:ss}s.
            </summary>
        </member>
        <member name="P:MediaLab.Common.Resources.Common.TimeSpanInvalid">
            <summary>
              Looks up a localized string similar to Tiempo Inv√°lido.
            </summary>
        </member>
        <member name="M:MediaLab.Common.Serializables.SerializableVector2.VerifyThreshold(MediaLab.Common.Serializables.SerializableVector2,MediaLab.Common.Serializables.SerializableVector2)">
            <summary>
            Equals method with minimun tolerance
            </summary>
            <param name="other"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:MediaLab.Common.Serializables.SerializableVector2.VerifyThresholdByDistance(MediaLab.Common.Serializables.SerializableVector2,MediaLab.Common.Serializables.SerializableVector2)">
            <summary>
            Equals method with minimun tolerance
            </summary>
            <param name="other"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:MediaLab.Common.Serializables.SerializableVector3.VerifyThreshold(MediaLab.Common.Serializables.SerializableVector3,MediaLab.Common.Serializables.SerializableVector3)">
            <summary>
            Equals method with minimun tolerance
            </summary>
            <param name="other"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:MediaLab.Common.Serializables.SerializableVector3.VerifyThresholdByDistance(MediaLab.Common.Serializables.SerializableVector3,MediaLab.Common.Serializables.SerializableVector3)">
            <summary>
            Equals method with minimun tolerance
            </summary>
            <param name="other"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:MediaLab.Common.Serializables.SerializableVector3.VerifyThresholdByAngle(MediaLab.Common.Serializables.SerializableVector3,MediaLab.Common.Serializables.SerializableVector3)">
            <summary>
            Equals method with minimun tolerance
            </summary>
            <param name="other"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:MediaLab.Common.Serializables.SerializableVector3.VerifyRemainingByDistance(MediaLab.Common.Serializables.SerializableVector3,MediaLab.Common.Serializables.SerializableVector3)">
            <summary>
            
            </summary>
            <param name="actual"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="T:MediaLab.Common.SettingsProvider.CustomFileSettingsProvider">
            <summary>
            The library file settings provider.
            </summary>
            <devdoc> 
               <para> 
                    This is a provider used to store configuration settings locally for libraries.
               </para> 
            </devdoc>
        </member>
        <member name="T:MediaLab.Common.SettingsProvider.Internals.FileSettingsStore">
            <summary>
            Library settings store.
            </summary>
            <devdoc> 
                This class abstracts the details of config system away from the LibraryFileSettingsProvider. It talks to 
                the configuration API and the relevant Sections to read and write settings.
                It understands sections of type LibrarySettingsStore. 
            </devdoc>
        </member>
        <member name="T:MediaLab.Common.SettingsProvider.Internals.FileSettingsStore.StoredSetting">
            <summary>
            Struct stored setting.
            </summary>
            <devdoc> 
                The LibrarySettingsStore talks to the LocalFileSettingsProvider through a dictionary which maps from 
                setting names to StoredSetting structs. This struct contains the relevant information.
            </devdoc>
        </member>
        <member name="T:MediaLab.Common.WindowOnTop.WindowFunctions">
            <summary>
            More info: https://msdn.microsoft.com/en-us/library/windows/desktop/ff468919(v=vs.85).aspx
            </summary>
        </member>
        <member name="F:MediaLab.Common.WindowOnTop.WindowFunctions.SwpTopMost">
            <summary>
            Used in function SetWindowPos. Places the window above all non-topmost windows. The window maintains its topmost position even when it is deactivated.
            </summary>
        </member>
        <member name="F:MediaLab.Common.WindowOnTop.WindowFunctions.SwpNoTopMost">
            <summary>
            Used in function SetWindowPos. Places the window above all non-topmost windows (that is, behind all topmost windows). This flag has no effect if the window is already a non-topmost window.
            </summary>
        </member>
        <member name="F:MediaLab.Common.WindowOnTop.WindowFunctions.SwpTop">
            <summary>
            Used in function SetWindowPos. Places the window at the top of the Z order.
            </summary>
        </member>
        <member name="F:MediaLab.Common.WindowOnTop.WindowFunctions.SwpTopBottom">
            <summary>
            Used in function SetWindowPos. Places the window at the bottom of the Z order. If the hWnd parameter identifies a topmost window, the window loses its topmost status and is placed at the bottom of all other windows.
            </summary>
        </member>
        <member name="T:MediaLab.Common.WindowOnTop.WindowFunctions.LsfwCodeEnum">
            <summary>
            Used in function LockSetForegroundWindow
            </summary>
        </member>
        <member name="F:MediaLab.Common.WindowOnTop.WindowFunctions.LsfwCodeEnum.Lock">
            <summary>
            Disables calls to SetForegroundWindow
            </summary>
        </member>
        <member name="F:MediaLab.Common.WindowOnTop.WindowFunctions.LsfwCodeEnum.Unlock">
            <summary>
            Enables calls to SetForegroundWindow
            </summary>
        </member>
        <member name="T:MediaLab.Common.WindowOnTop.WindowFunctions.SwCodeEnum">
            <summary>
            Used in function ShowWindow
            </summary>
        </member>
        <member name="F:MediaLab.Common.WindowOnTop.WindowFunctions.SwCodeEnum.ForceMinimize">
            <summary>
            Minimizes a window, even if the thread that owns the window is not responding. This flag should only be used when minimizing windows from a different thread.
            </summary>
        </member>
        <member name="F:MediaLab.Common.WindowOnTop.WindowFunctions.SwCodeEnum.Hide">
            <summary>
            Hides the window and activates another window.
            </summary>
        </member>
        <member name="F:MediaLab.Common.WindowOnTop.WindowFunctions.SwCodeEnum.Maximize">
            <summary>
            Maximizes the specified window.
            </summary>
        </member>
        <member name="F:MediaLab.Common.WindowOnTop.WindowFunctions.SwCodeEnum.Minimize">
            <summary>
            Minimizes the specified window and activates the next top-level window in the Z order.
            </summary>
        </member>
        <member name="F:MediaLab.Common.WindowOnTop.WindowFunctions.SwCodeEnum.Restore">
            <summary>
            Activates and displays the window. If the window is minimized or maximized, the system restores it to its original size and position. An application should specify this flag when restoring a minimized window.
            </summary>
        </member>
        <member name="F:MediaLab.Common.WindowOnTop.WindowFunctions.SwCodeEnum.Show">
            <summary>
            Activates the window and displays it in its current size and position.
            </summary>
        </member>
        <member name="F:MediaLab.Common.WindowOnTop.WindowFunctions.SwCodeEnum.ShowMaximized">
            <summary>
            Activates the window and displays it as a maximized window.
            </summary>
        </member>
        <member name="F:MediaLab.Common.WindowOnTop.WindowFunctions.SwCodeEnum.ShowMinimized">
            <summary>
            Activates the window and displays it as a minimized window.
            </summary>
        </member>
        <member name="F:MediaLab.Common.WindowOnTop.WindowFunctions.SwCodeEnum.ShowMinimizedNoActive">
            <summary>
            Displays the window as a minimized window. This value is similar to ShowMinimized, except the window is not activated.
            </summary>
        </member>
        <member name="F:MediaLab.Common.WindowOnTop.WindowFunctions.SwCodeEnum.ShowNoActive">
            <summary>
            Displays the window in its current size and position. This value is similar to Show, except that the window is not activated.
            </summary>
        </member>
        <member name="F:MediaLab.Common.WindowOnTop.WindowFunctions.SwCodeEnum.ShowNormal">
            <summary>
            Activates and displays a window. If the window is minimized or maximized, the system restores it to its original size and position. An application should specify this flag when displaying the window for the first time.
            </summary>
        </member>
        <member name="F:MediaLab.Common.WindowOnTop.WindowFunctions.SwCodeEnum.ShowNormalNoActive">
            <summary>
            Displays a window in its most recent size and position. This value is similar to ShowNormal, except that the window is not activated.
            </summary>
        </member>
        <member name="T:MediaLab.Common.WindowOnTop.WindowFunctions.SetWindowPosFlagsEnum">
            <summary>
            Used in function SetWindowPos
            </summary>
        </member>
        <member name="F:MediaLab.Common.WindowOnTop.WindowFunctions.SetWindowPosFlagsEnum.NoSize">
            <summary>
            Retains the current size (ignores the width and height parameters).
            </summary>
        </member>
        <member name="F:MediaLab.Common.WindowOnTop.WindowFunctions.SetWindowPosFlagsEnum.NoMove">
            <summary>
            Retains the current position (ignores X and Y parameters).
            </summary>
        </member>
        <member name="F:MediaLab.Common.WindowOnTop.WindowFunctions.SetWindowPosFlagsEnum.NoZOrder">
            <summary>
            Retains the current Z order (ignores the handleWindowInsertAfter parameter).
            </summary>
        </member>
        <member name="F:MediaLab.Common.WindowOnTop.WindowFunctions.SetWindowPosFlagsEnum.NoRedraw">
            <summary>
            Does not redraw changes. If this flag is set, no repainting of any kind occurs. This applies to the client area, the nonclient area (including the title bar and scroll bars), and any part of the parent window uncovered as a result of the window being moved. When this flag is set, the application must explicitly invalidate or redraw any parts of the window and parent window that need redrawing.
            </summary>
        </member>
        <member name="F:MediaLab.Common.WindowOnTop.WindowFunctions.SetWindowPosFlagsEnum.NoActivate">
            <summary>
            Does not activate the window. If this flag is not set, the window is activated and moved to the top of either the topmost or non-topmost group (depending on the setting of the hWndInsertAfter parameter).
            </summary>
        </member>
        <member name="F:MediaLab.Common.WindowOnTop.WindowFunctions.SetWindowPosFlagsEnum.DrawFrame">
            <summary>
            Draws a frame (defined in the window's class description) around the window.
            </summary>
        </member>
        <member name="F:MediaLab.Common.WindowOnTop.WindowFunctions.SetWindowPosFlagsEnum.ShowWindow">
            <summary>
            Displays the window.
            </summary>
        </member>
        <member name="F:MediaLab.Common.WindowOnTop.WindowFunctions.SetWindowPosFlagsEnum.HideWindow">
            <summary>
            Hides the window.
            </summary>
        </member>
        <member name="F:MediaLab.Common.WindowOnTop.WindowFunctions.SetWindowPosFlagsEnum.NoCopyBits">
            <summary>
            Discards the entire contents of the client area. If this flag is not specified, the valid contents of the client area are saved and copied back into the client area after the window is sized or repositioned.
            </summary>
        </member>
        <member name="F:MediaLab.Common.WindowOnTop.WindowFunctions.SetWindowPosFlagsEnum.NoOwnerZOrder">
            <summary>
            Does not change the owner window's position in the Z order.
            </summary>
        </member>
        <member name="F:MediaLab.Common.WindowOnTop.WindowFunctions.SetWindowPosFlagsEnum.NoReposition">
            <summary>
            Same as the NoOwnerZOrder flag.
            </summary>
        </member>
        <member name="F:MediaLab.Common.WindowOnTop.WindowFunctions.SetWindowPosFlagsEnum.NoSendChanging">
            <summary>
            Prevents the window from receiving the WM_WINDOWPOSCHANGING message.
            </summary>
        </member>
        <member name="F:MediaLab.Common.WindowOnTop.WindowFunctions.SetWindowPosFlagsEnum.Defererase">
            <summary>
            Prevents generation of the WM_SYNCPAINT message.
            </summary>
        </member>
        <member name="F:MediaLab.Common.WindowOnTop.WindowFunctions.SetWindowPosFlagsEnum.AsyncWindowPos">
            <summary>
            If the calling thread and the thread that owns the window are attached to different input queues, the system posts the request to the thread that owns the window. This prevents the calling thread from blocking its execution while other threads process the request.
            </summary>
        </member>
        <member name="M:MediaLab.Common.WindowOnTop.WindowFunctions.GetActiveWindow">
            <summary>
            Retrieves the window handle to the active window attached to the calling thread's message queue.
            </summary>
            <returns>The return value is the handle to the active window attached to the calling thread's message queue. Otherwise, the return value is NULL.</returns>
        </member>
        <member name="M:MediaLab.Common.WindowOnTop.WindowFunctions.SetActiveWindow(System.IntPtr)">
            <summary>
            Activates a window. The window must be attached to the calling thread's message queue.
            The SetActiveWindow function activates a window, but not if the application is in the background. The window will be brought into the foreground (top of Z-Order) if its application is in the foreground when the system activates the window.
            If the window identified by the handleWindowPtr parameter was created by the calling thread, the active window status of the calling thread is set to handleWindowPtr. Otherwise, the active window status of the calling thread is set to NULL.
            </summary>
            <param name="handleWindowPtr">A handle to the top-level window to be activated.</param>
            <returns>If the function succeeds, the return value is the handle to the window that was previously active. If the function fails, the return value is NULL.</returns>
        </member>
        <member name="M:MediaLab.Common.WindowOnTop.WindowFunctions.GetForegroundWindow">
            <summary>
            Retrieves a handle to the foreground window (the window with which the user is currently working). 
            The system assigns a slightly higher priority to the thread that creates the foreground window than it does to other threads.
            </summary>
            <returns>The return value is a handle to the foreground window. The foreground window can be NULL in certain circumstances, such as when a window is losing activation.</returns>
        </member>
        <member name="M:MediaLab.Common.WindowOnTop.WindowFunctions.SetForegroundWindow(System.IntPtr)">
            <summary>
            Brings the thread that created the specified window into the foreground and activates the window. Keyboard input is directed to the window, and various visual cues are changed for the user.
            An application cannot force a window to the foreground while the user is working with another window. Instead, Windows flashes the taskbar button of the window to notify the user.
            </summary>
            <param name="handleWindowPtr">A handle to the window that should be activated and brought to the foreground.</param>
            <returns>If the window was brought to the foreground, return true. If the window was not brought to the foreground, return false.</returns>
        </member>
        <member name="M:MediaLab.Common.WindowOnTop.WindowFunctions.AllowSetForegroundWindow(System.Int32)">
            <summary>
            Enables the specified process to set the foreground window using the SetForegroundWindow function. The calling process must already be able to set the foreground window.
            </summary>
            <param name="processId">The identifier of the process that will be enabled to set the foreground window.</param>
            <returns>If the function succeeds, return true. If the function fails, return false. The function will fail if the calling process cannot set the foreground window.</returns>
        </member>
        <member name="M:MediaLab.Common.WindowOnTop.WindowFunctions.LockSetForegroundWindow(MediaLab.Common.WindowOnTop.WindowFunctions.LsfwCodeEnum)">
            <summary>
            The foreground process can call the LockSetForegroundWindow function to disable calls to the SetForegroundWindow function.
            </summary>
            <param name="lsfwCode">Specifies whether to enable or disable calls to SetForegroundWindow.</param>
            <returns>If the function succeeds, return true. If the function fails, return false.</returns>
        </member>
        <member name="M:MediaLab.Common.WindowOnTop.WindowFunctions.GetFocus">
            <summary>
            Retrieves the handle to the window that has the keyboard focus, if the window is attached to the calling thread's message queue.
            </summary>
            <returns>The return value is the handle to the window with the keyboard focus. If the calling thread's message queue does not have an associated window with the keyboard focus, the return value is NULL.</returns>
        </member>
        <member name="M:MediaLab.Common.WindowOnTop.WindowFunctions.SetFocus(System.IntPtr)">
            <summary>
            Sets the keyboard focus to the specified window. The window must be attached to the calling thread's message queue.
            </summary>
            <param name="handleWindowPtr">A handle to the window that will receive the keyboard input. If this parameter is NULL, keystrokes are ignored.</param>
            <returns>If the function succeeds, the return value is the handle to the window that previously had the keyboard focus. If the handleWindowPtr parameter is invalid or the window is not attached to the calling thread's message queue, the return value is NULL.</returns>
        </member>
        <member name="M:MediaLab.Common.WindowOnTop.WindowFunctions.GetTopWindow(System.IntPtr)">
            <summary>
            Examines the Z order of the child windows associated with the specified parent window and retrieves a handle to the child window at the top of the Z order.
            </summary>
            <param name="handleWindowPtr">A handle to the parent window whose child windows are to be examined. If this parameter is NULL, the function returns a handle to the window at the top of the Z order.</param>
            <returns>If the function succeeds, the return value is a handle to the child window at the top of the Z order. If the specified window has no child windows, the return value is NULL.</returns>
        </member>
        <member name="M:MediaLab.Common.WindowOnTop.WindowFunctions.ShowWindow(System.IntPtr,MediaLab.Common.WindowOnTop.WindowFunctions.SwCodeEnum)">
            <summary>
            Sets the specified window's show state.
            </summary>
            <param name="handleWindowPtr">A handle to the window.</param>
            <param name="swCode">Controls how the window is to be shown.</param>
            <returns>If the window was previously visible, return true. If the window was previously hidden, return false.</returns>
        </member>
        <member name="M:MediaLab.Common.WindowOnTop.WindowFunctions.ShowWindowAsync(System.IntPtr,MediaLab.Common.WindowOnTop.WindowFunctions.SwCodeEnum)">
            <summary>
            Sets the show state of a window without waiting for the operation to complete.
            </summary>
            <param name="handleWindowPtr">A handle to the window.</param>
            <param name="swCode">Controls how the window is to be shown.</param>
            <returns>If the operation was successfully started, return true. Otherwise, return false.</returns>
        </member>
        <member name="M:MediaLab.Common.WindowOnTop.WindowFunctions.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,MediaLab.Common.WindowOnTop.WindowFunctions.SetWindowPosFlagsEnum)">
            <summary>
            Changes the size, position, and Z order of a child, pop-up, or top-level window. These windows are ordered according to their appearance on the screen. The topmost window receives the highest rank and is the first window in the Z order.
            </summary>
            <param name="handleWindowPtr">A handle to the window.</param>
            <param name="handleWindowInsertAfter">A handle to the window to precede the positioned window in the Z order. This parameter must be a window handle or one of the following values: SwpTopMost, SwpNoTopMost, SwpTop, SwpBottom</param>
            <param name="x">The new position of the left side of the window, in client coordinates.</param>
            <param name="y">The new position of the top of the window, in client coordinates.</param>
            <param name="width">The new width of the window, in pixels.</param>
            <param name="height">The new height of the window, in pixels.</param>
            <param name="setWindowPosFlags">The window sizing and positioning flags.</param>
            <returns>If the function succeeds, return true. Otherwise, return false.</returns>
        </member>
        <member name="M:MediaLab.Common.WindowOnTop.WindowFunctions.BringWindowToTop(System.IntPtr)">
            <summary>
            Brings the specified window to the top of the Z order. If the window is a top-level window, it is activated. If the window is a child window, the top-level parent window associated with the child window is activated.
            Calling this function is similar to calling the SetWindowPos function to change a window's position in the Z order. BringWindowToTop does not make a window a top-level window.
            </summary>
            <param name="handleWindow">A handle to the window to bring to the top of the Z order.</param>
            <returns>If the function succeeds, return true. Otherwise, return false.</returns>
        </member>
        <member name="M:MediaLab.Common.WindowOnTop.WindowFunctions.GetWindowThreadProcessId(System.IntPtr,System.UInt32@)">
            <summary>
            Retrieves the identifier of the thread that created the specified window and, optionally, the identifier of the process that created the window.
            </summary>
            <param name="handleWindow">A handle to the window.</param>
            <param name="lpdwProcessId">A pointer to a variable that receives the process identifier. If this parameter is not NULL, GetWindowThreadProcessId copies the identifier of the process to the variable; otherwise, it does not.</param>
            <returns>The return value is the identifier of the thread that created the window.</returns>
        </member>
        <member name="M:MediaLab.Common.WindowOnTop.WindowFunctions.GetWindowThreadProcessId(System.IntPtr,System.IntPtr)">
            <summary>
            Retrieves the identifier of the thread that created the specified window and, optionally, the identifier of the process that created the window.
            When you don't want the processId, use this overload and pass IntPtr.Zero for the second parameter
            </summary>
            <param name="handleWindow">A handle to the window.</param>
            <param name="processId">A pointer to a variable that receives the process identifier. If this parameter is not NULL, GetWindowThreadProcessId copies the identifier of the process to the variable; otherwise, it does not.</param>
            <returns>The return value is the identifier of the thread that created the window.</returns>
        </member>
        <member name="M:MediaLab.Common.WindowOnTop.WindowFunctions.AttachThreadInput(System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Attaches or detaches the input processing mechanism of one thread to that of another thread.
            </summary>
            <param name="idThreadAttach">The identifier of the thread to be attached to another thread. The thread to be attached cannot be a system thread.</param>
            <param name="idThreadAttachTo">The identifier of the thread to which idAttach will be attached. This thread cannot be a system thread. A thread cannot attach to itself.Therefore, idAttachTo cannot equal idAttach.</param>
            <param name="isAttachThreads">If this parameter is TRUE, the two threads are attached. If the parameter is FALSE, the threads are detached.</param>
            <returns>If the function succeeds, return true. Otherwise, return false.</returns>
        </member>
        <member name="M:MediaLab.Common.WindowOnTop.WindowFunctions.GetCurrentThreadId">
            <summary>
            Retrieves the thread identifier of the calling thread.
            </summary>
            <returns>The return value is the thread identifier of the calling thread.</returns>
        </member>
        <member name="T:MediaLab.Common.WindowOnTop.WindowOnTopMostHelper">
            <summary>
            Helper for brings the specified window to the top of the Z order.
            </summary>
        </member>
        <member name="M:MediaLab.Common.WindowOnTop.WindowOnTopMostHelper.BringWindowToTop(System.Diagnostics.Process)">
            <summary>
            Brings the specified window to the top of the Z order.
            </summary>
            <param name="process">Process window to bring to the top of the Z order.</param>
        </member>
        <member name="M:MediaLab.Common.WindowOnTop.WindowOnTopMostHelper.BringWindowToTop(System.IntPtr)">
            <summary>
            Brings the specified window to the top of the Z order.
            </summary>
            <param name="handleWindow">A handle to the window to bring to the top of the Z order.</param>
        </member>
    </members>
</doc>
